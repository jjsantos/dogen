<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/test_data/enum_header_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::test_data #>
<#+

dogen::formatters::file enum_implementation_formatter_stitch(
    formatters::entity_formatting_assistant& fa,
    const formattables::enum_info& e) {

    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
        {
            auto snf(fa.make_scoped_namespace_formatter());
#>

<#= e.name() #>_generator::<#= e.name() #>_generator() : position_(0) { }
void <#= e.name() #>_generator::
populate(const unsigned int position, result_type& v) {
    v = static_cast<<#= e.name() #>>(position % <#= e.enumerators().size() #>);
}

<#= e.name() #>_generator::result_type
<#= e.name() #>_generator::create(const unsigned int  position) {
    result_type r;
    <#= e.name() #>_generator::populate(position, r);
    return r;
}

<#= e.name() #>_generator::result_type
<#= e.name() #>_generator::operator()() {
    return create(position_++);
}

<#+
         } // snf
    } // sbf
    return fa.make_file();
}

#>
