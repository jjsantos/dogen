<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright(C) 2012 Kitanda <info@kitanda.co.uk> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/serialization/registrar_implementation_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_boilerplate_formatter.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::serialization #>
<#+

dogen::formatters::file registrar_implementation_formatter_stitch(
    formatters::entity_formatting_assistant& fa,
    const formattables::registrar_info& ri) {

    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
        {
            auto snf(fa.make_scoped_namespace_formatter());
            const auto deps(ri.model_dependencies());
            const auto leaves(ri.leaves());
            const bool has_types(!deps.empty() || !leaves.empty());
            const std::string arg_name(has_types ? " ar" : "");
#>

template<typename Archive>
void register_types(Archive&<#= arg_name #>) {
<#+
            if (has_types) {
                for (const auto d : deps)
#>
    <#= d #>::register_types(ar);
<#+
                if (!deps.empty() && !leaves.empty())
#>

<#+
                for (const auto l : leaves)
#>
    ar.template register_type<<#= l #>>();
<#+

            }
#>
}

template void register_types(boost::archive::polymorphic_oarchive&<#= arg_name #>);
template void register_types(boost::archive::polymorphic_iarchive&<#= arg_name #>);

template void register_types(boost::archive::text_oarchive&<#= arg_name #>);
template void register_types(boost::archive::text_iarchive&<#= arg_name #>);

template void register_types(boost::archive::binary_oarchive&<#= arg_name #>);
template void register_types(boost::archive::binary_iarchive&<#= arg_name #>);

<#+
            if (!fa.is_xml_serialization_disabled()) {
#>
template void register_types(boost::archive::xml_oarchive&<#= arg_name #>);
template void register_types(boost::archive::xml_iarchive&<#= arg_name #>);

<#+
            }
        } // snf
    } // sbf
    return fa.make_file();
}

#>
