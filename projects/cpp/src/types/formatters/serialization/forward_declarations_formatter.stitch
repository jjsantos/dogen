<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/types/forward_declarations_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_boilerplate_formatter.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::serialization #>
<#+

dogen::formatters::file forward_declarations_formatter_stitch(
    formatters::entity_formatting_assistant& fa,
    const formattables::forward_declarations_info& fd) {

    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
#>

namespace boost {
namespace serialization {

template<class Archive>
void save(Archive& ar, const <#= fd.qualified_name() #>& v, unsigned int version);

template<class Archive>
void load(Archive& ar, <#= fd.qualified_name() #>& v, unsigned int version);

} }

<#+
    } // sbf
    return fa.make_file();
}

#>
