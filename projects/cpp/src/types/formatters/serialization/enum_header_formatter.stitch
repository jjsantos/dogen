<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/serialization/enum_header_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::serialization #>
<#+

dogen::formatters::file enum_header_formatter_stitch(
    formatters::entity_formatting_assistant& fa,
    const formattables::enum_info& e) {
    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
#>

template<class Archive>
void serialize(Archive& ar, <#= e.qualified_name() #>& v, unsigned int /*version*/){
<#+
        if (!fa.is_xml_serialization_disabled()) {
#>
    using boost::serialization::make_nvp;
    ar & make_nvp("<#= e.name() #>", v);
<#+
        } else {
#>
    ar & v;
<#+
        }
#>
}

<#+
    } // sbf
    return fa.make_file();
    // return fa.make_file(false/*overwrite*/);
}
#>
