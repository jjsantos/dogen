<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/odb/class_header_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::odb #>
<#+

dogen::formatters::file class_header_formatter_stitch(
    formatters::entity_formatting_assistant& fa,
    const formattables::class_info& c) {

    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
        const auto& os(c.settings().opaque_settings());
        const auto odbs(fa.get_odb_settings(os));
        if (!odbs || odbs->pragmas().empty()) {
#>
// class has no ODB pragmas defined.

<#+
        } else {
            {
                auto snf(fa.make_scoped_namespace_formatter());

#>

#ifdef ODB_COMPILER

<#+
                const std::string odb_key("odb_pragma");
                for (const auto& pg : odbs->pragmas())
#>
#pragma db object(<#= c.name() #>) <#= pg #>
<#+

                bool is_first(true);
                for (const auto p : c.properties()) {
                    const auto& pos(p.opaque_settings());
                    const auto podbs(fa.get_odb_settings(pos));
                    if (podbs) {
                        for (const auto pg : podbs->pragmas()) {
                            if (is_first)
#>

<#+
                            is_first = false;
#>
#pragma db member(<#= c.name() #>::<#= fa.make_member_variable_name(p) #>) <#= pg #>
<#+
                        }
                    }
                }
#>

#endif

<#+
            }
#>

<#+
        }
    } // sbf
    return fa.make_file();
}
#>
