<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/io/enum_header_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::io #>
<#+

dogen::formatters::file enum_implementation_formatter_stitch(
    formatters::entity_formatting_assistant& fa,
    const formattables::enum_info& e) {

    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
        {
            auto snf(fa.make_scoped_namespace_formatter());
#>

std::ostream& operator<<(std::ostream& s, const <#= e.name() #>& v) {
    s << "{ " << "\"__type__\": " << "\"<#= e.name() #>\", " << "\"value\": ";

    std::string attr;
    switch (v) {
<#+
            for (const auto en : e.enumerators()) {
#>
    case <#= e.name() #>::<#= en.name() #>:
        attr = "\"<#= en.name() #>\"";
        break;
<#+
            }
#>
    default:
        throw std::invalid_argument("Invalid value for <#= e.name() #>");
    }
    s << attr << " }";
    return s;
}

<#+
         } // snf
    } // sbf
    return fa.make_file();
}

#>
