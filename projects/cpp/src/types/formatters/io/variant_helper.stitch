<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/io/variant_helper_stitch.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::io #>
<#+

void variant_helper_stitch(
    formatters::nested_type_formatting_assistant& fa,
    const formattables::nested_type_info& t) {

    {
        auto snf(fa.make_scoped_namespace_formatter(t));
#>

struct <#= t.complete_identifiable_name() #>_visitor : public boost::static_visitor<> {
    <#= t.complete_identifiable_name() #>_visitor(std::ostream& s) : stream_(s) {
        s << "{ " << "\"__type__\": " << "\"<#= t.name() #>\"" << ", ";
        s << "\"data\": ";
    }

    ~<#= t.complete_identifiable_name() #>_visitor() { stream_ << " }"; }
<#+
        for (const auto& c : t.children()) {
#>

    void operator()(const <#= c.name() #><#= (c.is_primitive() ? "" : "&") #> v) const {
<#+
            if (c.is_primitive()) {
#>
        stream_ << "{ " << "\"__type__\": " << "\"<#= c.name() #>\"" << ", ";
        stream_ << "\"value\": ";
        stream_ << <#= fa.streaming_for_type(c, "v") #>;
        stream_ << " }";
<#+
            } else
#>
        stream_ << <#= fa.streaming_for_type(c, "v") #>;
    }
<#+
        }
#>

private:
    std::ostream& stream_;
};

inline std::ostream& operator<<(std::ostream& s, const <#= t.complete_name() #>& v) {
    boost::apply_visitor(<#= t.complete_identifiable_name() #>_visitor(s), v);
    return s;
}

<#+
    }
#>

<#+
}
#>
