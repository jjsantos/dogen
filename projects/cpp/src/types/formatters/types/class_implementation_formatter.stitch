<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/types/class_implementation_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/io/inserter_implementation_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::types #>
<#+

dogen::formatters::file class_implementation_formatter_stitch(
    formatters::entity_formatting_assistant& fa,
    const formattables::class_info& c) {

    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
        fa.add_helper_methods();

        {
            auto snf(fa.make_scoped_namespace_formatter());

            /*
             * Default constructor.
             */
            if (c.requires_manual_default_constructor()) {
#>

<#= c.name() #>::<#= c.name() #>()
<#+
                // FIXME: this was just too hard to hack with a sequence.
                // FIXME: indentation is all off too.
                std::ostringstream ss;
                bool is_first(true);
                for (const auto p : c.properties()) {
                    if (!p.type().is_primitive() && !p.type().is_enumeration())
                        continue;

                    if (!is_first)
                        ss << "," << std::endl << "      ";

                    ss << fa.make_member_variable_name(p)
                       << "(static_cast<" << p.type().complete_name()
                       << ">(0))";

                    is_first = false;
                }
                ss << " { }";
                const std::string out(ss.str());
#>
    : <#= out #>
<#+
            }

            /*
             * Move constructor.
             */
            if (c.requires_manual_move_constructor()) {
#>

<#= c.name() #>::<#= c.name() #>(<#= c.name() #>&& rhs)
<#+
                unsigned int size(c.parents().size() + c.properties().size());

                dogen::formatters::sequence_formatter sf(size);
                sf.prefix_configuration().first(": ").not_first("  ");
                sf.postfix_configuration().last(" { }");
                for (const auto p : c.parents()) {
#>
    <#= sf.prefix() #><#= p.qualified_name() #>(
        std::forward<<#= p.qualified_name() #>>(rhs))<#= sf.postfix() #>
<#+
                    sf.next();
                }

                for (const auto p : c.properties()) {
#>
    <#= sf.prefix() #><#= fa.make_member_variable_name(p) #>(std::move(rhs.<#= fa.make_member_variable_name(p) #>))<#= sf.postfix() #>
<#+
                    sf.next();
                }
            }

            /*
             * Complete constructor.
             */
            if (!fa.is_complete_constructor_disabled() && !c.all_properties().empty()) {
                const auto prop_count(c.all_properties().size());
                if (prop_count == 1) {
                     const auto p(*c.all_properties().begin());
#>

<#= c.name() #>::<#= c.name() #>(const <#= p.type().complete_name() #><#= fa.make_by_ref_text(p) #> <#= p.name() #>)
<#+
                } else {
#>

<#= c.name() #>::<#= c.name() #>(
<#+

                    dogen::formatters::sequence_formatter sf(prop_count);
                    sf.postfix_configuration().last(")");
                    for (const auto p : c.all_properties()) {
#>
    const <#= p.type().complete_name() #><#= fa.make_by_ref_text(p) #> <#= p.name() #><#= sf.postfix() #>
<#+
                        sf.next();
                    }
                }

                int sequence_size(c.properties().size() + c.parents().size());
                for (const auto p : c.parents())
                    sequence_size += (p.properties().size() > 1 ?
                        p.properties().size() : 0);

                dogen::formatters::sequence_formatter sf(sequence_size);
                sf.prefix_configuration().first(": ").not_first("  ");
                sf.postfix_configuration().last(" { }");
                for (const auto p : c.parents()) {
                    if (p.properties().size() <= 1) {
#>
    <#= sf.prefix() #><#= p.qualified_name() #>(<#= (p.properties().empty() ? "" : p.properties().front().name()) #>)<#= sf.postfix() #>
<#+
                        sf.next();
                    } else {
#>
    <#= sf.prefix() #><#= p.qualified_name() #>(<#= sf.postfix(true/*skip*/) #>
<#+
                        sf.next();
                        dogen::formatters::sequence_formatter sf2(p.properties().size());
                        sf2.element_separator("");

                        sf2.prefix_configuration().first("  ").not_first("  ");
                        sf2.postfix_configuration().last(")");
                        for (const auto prop : p.properties()) {
#>
    <#= sf2.prefix() #><#= prop.name() #><#= sf2.postfix() #><#= sf.postfix() #>
<#+
                            sf2.next();
                            sf.next();
                        }
                    }
                }

                for (const auto p : c.properties()) {
#>
    <#= sf.prefix() #><#= fa.make_member_variable_name(p) #>(<#= p.name() #>)<#= sf.postfix() #>
<#+
                    sf.next();
                }
            }

            /*
             * Streaming
             */
            if (fa.is_io_enabled()) {
                if (c.is_parent() || !c.parents().empty()) {
#>

void <#= c.name() #>::to_stream(std::ostream& s) const {
<#+
                io::inserter_implementation_helper_stitch(fa, c, true/*inside_class*/);
#>
}
<#+
                }
            }

            /*
             * Swap
             */
            if (!c.is_immutable() && (!c.all_properties().empty() || c.is_parent())) {
                const bool empty(c.all_properties().empty() && c.parents().empty());
#>

void <#= c.name() #>::swap(<#= c.name() #>&<#= (empty ? "" : " other") #>) noexcept {
<#+
               if (!c.parents().empty()) {
                    for (const auto p : c.parents())
#>
    <#= p.name() #>::swap(other);

<#+

               }

               if (!c.properties().empty()) {
#>
    using std::swap;
<#+
                   for (const auto p : c.properties())
#>
    swap(<#= fa.make_member_variable_name(p) #>, other.<#= fa.make_member_variable_name(p) #>);
<#+
               }
#>
}
<#+
            }

            /*
             * Equals method
             */
            if (!c.is_parent() && !c.parents().empty()) {
#>

bool <#= c.name() #>::equals(const <#= c.original_parent_name_qualified() #>& other) const {
    const <#= c.name() #>* const p(dynamic_cast<const <#= c.name() #>* const>(&other));
    if (!p) return false;
    return *this == *p;
}
<#+
            }

            /*
             * Equals operator
             */
            std::string method_name;
            if (c.is_parent())
                method_name = "compare";
            else
                method_name = "operator==";
#>

bool <#= c.name() #>::<#= method_name #>(const <#= c.name() #>& <#= (c.all_properties().empty() ? "/*rhs*/" : "rhs") #>) const {
<#+

            if (c.all_properties().empty())
#>
    return true;
<#+
            else {
                dogen::formatters::sequence_formatter sf(c.parents().size());
                sf.element_separator("");
                sf.prefix_configuration().first("return ").not_first("    ");
                sf.postfix_configuration().not_last(" &&");
                if (c.properties().empty())
                    sf.postfix_configuration().last(";");
                else
                    sf.postfix_configuration().last(" &&");

                for (const auto p : c.parents()) {
#>
    <#= sf.prefix() #><#= p.name() #>::compare(rhs)<#= sf.postfix() #>
<#+
                    sf.next();
                }
                sf.reset(c.properties().size());
                sf.element_separator("");
                if (c.parents().empty())
                   sf.prefix_configuration().first("return ");
                else
                   sf.prefix_configuration().first("    ");
                sf.prefix_configuration().not_first("    ");
                sf.postfix_configuration().last(";").not_last(" &&");
                for (const auto p : c.properties()) {
#>
    <#= sf.prefix() #><#= fa.make_member_variable_name(p) #> == rhs.<#= fa.make_member_variable_name(p) #><#= sf.postfix() #>
<#+
                    sf.next();
                }
            }
#>
}
<#+

            /*
             * Assignment
             */
            if (!c.all_properties().empty() && !c.is_parent() && !c.is_immutable()) {
#>

<#= c.name() #>& <#= c.name() #>::operator=(<#= c.name() #> other) {
    using std::swap;
    swap(*this, other);
    return *this;
}
<#+
            }

            /*
             * Getters and setters
             */
             for (const auto p : c.properties()) {
                 if (p.type().is_primitive() || p.type().is_enumeration()) {
#>

<#= p.type().complete_name() #> <#= c.name() #>::<#= p.name() #>() const {
    return <#= fa.make_member_variable_name(p) #>;
}
<#+
                    if (!c.is_immutable()) {
#>

<#= (p.is_fluent() ? c.name() + "&" : "void") #> <#= c.name() #>::<#= p.name() #>(const <#= p.type().complete_name() #> v) {
    <#= fa.make_member_variable_name(p) #> = v;
<#+
                        if (p.is_fluent()) {
#>
    return *this;
<#+
                        }
#>
}
<#+
                    }
                } else {
#>

const <#= p.type().complete_name() #>& <#= c.name() #>::<#= p.name() #>() const {
    return <#= fa.make_member_variable_name(p) #>;
}
<#+
                    if (!c.is_immutable()) {
#>

<#= p.type().complete_name() #>& <#= c.name() #>::<#= p.name() #>() {
    return <#= fa.make_member_variable_name(p) #>;
}

<#= (p.is_fluent() ? c.name() + "&" : "void") #> <#= c.name() #>::<#= p.name() #>(const <#= p.type().complete_name() #>& v) {
    <#= fa.make_member_variable_name(p) #> = v;
<#+
                        if (p.is_fluent()) {
#>
    return *this;
<#+
                        }
#>
}

<#= (p.is_fluent() ? c.name() + "&" : "void") #> <#= c.name() #>::<#= p.name() #>(const <#= p.type().complete_name() #>&& v) {
    <#= fa.make_member_variable_name(p) #> = std::move(v);
<#+
                        if (p.is_fluent()) {
#>
    return *this;
<#+
                        }
#>
}
<#+
                    }
                }
            }
#>

<#+
        } // snf
    } // sbf
    return fa.make_file();
}

#>
