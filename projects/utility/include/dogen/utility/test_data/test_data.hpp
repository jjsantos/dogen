/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */
#ifndef DOGEN_UTILITY_TEST_DATA_TEST_DATA_HPP
#define DOGEN_UTILITY_TEST_DATA_TEST_DATA_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif

#include <string>
#include <boost/filesystem/path.hpp>

namespace dogen {
namespace utility {

/**
 * @namespace dogen::utility::test_data
 *
 * @brief Contains dogen's static factories and helpers to access
 * test data, as well as management of test data sets.
 *
 * The static factories (called generators), are exported so that
 * other models can create generators based on them.
 *
 * @section s_0_1 Basic test data concepts
 *
 * The key concept with regards to test data is that of a test data
 * set: this is a lump of data that is frequently used together. All
 * test data sets are stored in @e GIT_ROOT/test_data directory. The
 * name of the test data set is given by the directory that stores it.
 *
 * A test data set is made up of files; these files are kept on one of
 * three sub-directories:
 *
 * @li @e input: used only as an input for tests
 * @li @e expected: baseline for tests
 * @li @e actual: data generated by tests
 *
 * Files in @e expected and @e actual should be identical or else
 * there is a test failure.
 *
 * These three directories above are known as @e item @e types because
 * they classify test data items into three possible types. A test
 * data @e item is then a name of a file which can have up to three
 * @e item @e types - e.g. the same file name can exist in three
 * locations, although in reality its much more likely for it to exist
 * only in @e actual and @e expected.
 *
 * @section s_0_2 Test data locations
 *
 * Test data sets are stored in two places:
 *
 * @li git @e test_data directory: contains both the input and
 * expected aspect of all test data sets. Tests are expected @b not to
 * make use of the files in git directly.
 *
 * @li output @e test_data: For each data set, the sub-directories of
 * @e actual and @e expected are copied by CMake straight from git and
 * left untouched; The @e actual sub-directory is written to by
 * tests. The path to this @e test_data directory is returned by
 * test_data_directory().
 *
 * @section s_0_3 Rebaselining
 *
 * In case of a test failure, each test is expected to print the diff
 * command to diff between @e actual and @e expected.
 *
 * In cases were code has changed and the diffs between @e actual and
 * @e expected are explainable, one needs to @e rebaseline the test
 * data; that is, to create a new baseline from which to compare
 * results.
 *
 * To rebaseline a given test data file, copy it from its output @e
 * actual directory into the corresponding git directory. It will then
 * be checked in as normal and become the new baseline. This is done
 * via the make file targets for a given test data set
 * (e.g. rebase_TEST_DATA_SET_NAME).
 *
 */
namespace test_data {

} } }

#endif
