--- boost/graph/detail/adjacency_list.hpp	2014-08-03 20:46:30.000000000 +0100
+++ /usr/local/personal/include/boost/graph/detail/adjacency_list.hpp	2015-10-14 18:13:34.606682062 +0100
@@ -314,8 +314,24 @@
         return *this;
       }
 #else
-      stored_edge_property(self&& x) = default;
-      self& operator=(self&& x) = default;
+      stored_edge_property(self&& x) : Base(static_cast< Base&& >(x)),
+          m_property(std::move(x.m_property)) { }
+      stored_edge_property(self const& x) : Base(static_cast< Base const& >(x)),
+          m_property(std::move(const_cast<self&>(x).m_property)) { }
+      self& operator=(self&& x) {
+        // NOTE: avoid 'Base::operator=(x);' broken on SGI MIPSpro (bug 55771 of Mozilla).
+        static_cast<Base&>(*this) = static_cast< Base&& >(x);
+        m_property = std::move(x.m_property);
+        return *this;
+      }
+      self& operator=(self const& x) {
+        // NOTE: avoid 'Base::operator=(x);' broken on SGI MIPSpro (bug 55771 of Mozilla).
+        static_cast<Base&>(*this) = static_cast< Base const& >(x);
+        m_property = std::move(const_cast<self&>(x).m_property);
+        return *this;
+      }
+      // stored_edge_property(self&& x) = default;
+      // self& operator=(self&& x) = default;
 #endif
       inline Property& get_property() { return *m_property; }
       inline const Property& get_property() const { return *m_property; }
